---
import Section from "./Section.astro";
import type { ExperienceProps } from "@types";

interface Props {
  experience: ExperienceProps[];
}

const { experience } = Astro.props;

// Array de colores para gradientes variados
const gradients = [
  'from-blue-500/20 to-indigo-500/20',
  'from-cyan-500/20 to-blue-500/20',
  'from-purple-500/20 to-pink-500/20',
  'from-blue-500/20 to-teal-500/20',
  'from-violet-500/20 to-indigo-500/20',
  'from-pink-500/20 to-rose-500/20',
  'from-indigo-500/20 to-sky-500/20',
  'from-teal-500/20 to-emerald-500/20',
  'from-sky-500/20 to-blue-500/20',
  'from-rose-500/20 to-purple-500/20',
]
---

<Section text="Features" href="features">
  <div class="mb-6">
    <div class="w-20 h-1 bg-blue-500 rounded-full mb-4"></div>
  </div>
  {
    experience.map(({ company, position, startDate, endDate, summary }) => (
      <div class="mb-14 last:mb-0">
        <div class="px-2 py-2 md:px-4 md:py-6">
          <!-- Contenido con mejor jerarquía visual -->
          
          {(position || startDate || endDate) && (
            <div class="flex flex-wrap items-center gap-3 mb-6">
              {position && <h3 class="text-xl font-semibold text-white/95">{position}</h3>}
              {(startDate || endDate) && 
                <span class="px-3 py-1 text-xs font-medium bg-blue-500/10 text-blue-400 rounded-full">
                  {startDate}{startDate && endDate && ' — '}{endDate}
                </span>
              }
            </div>
          )}
          {Array.isArray(summary) && (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 md:gap-8 mt-8">
              {summary.map((log, idx) => (
                <div class={`relative rounded-xl p-5 flex flex-col items-center justify-center min-h-[120px] bg-gradient-to-br ${gradients[idx % gradients.length]} border border-white/5 backdrop-blur-sm hover:scale-[1.03] hover:shadow-lg hover:shadow-blue-500/20 hover:border-blue-500/30 transition-all duration-300 cursor-pointer group overflow-hidden`}>
                  <span class="mb-2">
                    {idx === 0 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="4" y="4" width="16" height="16" rx="4"/><path d="M8 12h8M12 8v8"/></svg>
                    )}
                    {idx === 1 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4 17v-2a4 4 0 014-4h8a4 4 0 014 4v2"/><circle cx="12" cy="7" r="4"/></svg>
                    )}
                    {idx === 2 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="7" width="18" height="13" rx="2"/><path d="M8 7V5a4 4 0 018 0v2"/></svg>
                    )}
                    {idx === 3 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 20v-6M8 20v-4M16 20v-2"/><rect x="2" y="4" width="20" height="6" rx="2"/></svg>
                    )}
                    {idx === 4 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><path d="M12 8v4l3 3"/></svg>
                    )}
                    {idx === 5 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="2" y="7" width="20" height="7" rx="3.5"/><path d="M6 10v4"/></svg>
                    )}
                    {idx === 6 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 12h18"/><path d="M12 3v18"/></svg>
                    )}
                    {idx === 7 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="4" y="4" width="16" height="16" rx="4"/><path d="M8 8h8v8H8z"/></svg>
                    )}
                    {idx === 8 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 20l9-5-9-5-9 5 9 5z"/><path d="M12 12V4"/></svg>
                    )}
                    {idx === 9 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><path d="M16 12a4 4 0 11-8 0 4 4 0 018 0z"/></svg>
                    )}
                    {idx === 10 && (
                      <svg class="w-6 h-6 text-slate-100 group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="7" width="18" height="13" rx="2"/><path d="M8 7V5a4 4 0 018 0v2"/></svg>
                    )}
                  </span>
                  <span class="text-sm font-medium text-white/95 text-center leading-tight break-words w-full relative z-10">
                    {log}
                  </span>
                  
                  <!-- Decorative elements for visual interest -->
                  <span class="absolute top-0 left-0 w-[40%] h-[1px] bg-gradient-to-r from-blue-500/0 via-blue-500/50 to-blue-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
                  <span class="absolute -top-px -left-px block w-2 h-2 border-t-2 border-l-2 border-blue-500/30 group-hover:border-blue-500/70 transition-colors duration-300"></span>
                  <span class="absolute -top-px -right-px block w-2 h-2 border-t-2 border-r-2 border-blue-500/30 group-hover:border-blue-500/70 transition-colors duration-300"></span>
                  <span class="absolute -bottom-px -left-px block w-2 h-2 border-b-2 border-l-2 border-blue-500/30 group-hover:border-blue-500/70 transition-colors duration-300"></span>
                  <span class="absolute -bottom-px -right-px block w-2 h-2 border-b-2 border-r-2 border-blue-500/30 group-hover:border-blue-500/70 transition-colors duration-300"></span>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    ))
  }
</Section>

<style>
  /* Sutil efecto de brillo para los cards al hacer hover */
  div[class*="rounded-xl"]::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at var(--x, 50%) var(--y, 50%), rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 60%);
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none;
    z-index: 5;
  }
  
  div[class*="rounded-xl"]:hover::before {
    opacity: 1;
  }
</style>

<script>
  // Tracking para el efecto de brillo en hover
  document.querySelectorAll('div[class*="rounded-xl"]').forEach(card => {
    card.addEventListener('mousemove', function(this: Element, e) {
      const mouseEvent = e as MouseEvent;
      const element = this as HTMLElement;
      const rect = element.getBoundingClientRect();
      const x = ((mouseEvent.clientX - rect.left) / rect.width) * 100;
      const y = ((mouseEvent.clientY - rect.top) / rect.height) * 100;
      element.style.setProperty('--x', `${x}%`);
      element.style.setProperty('--y', `${y}%`);
    });
  });
</script>
